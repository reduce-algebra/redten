%***************************************************************************
%  FILE = sys.env
%
%  REDTEN source code
%  Copyright (c) 1986, 1987, 1991-1994,2006 University of Toronto.
%  All Rights Reserved.
%
%  Written by John Harper and Charles Dyer
%  harper@manitou.astro.utoronto.ca  dyer@manitou.astro.utoronto.ca
%
%  Permission to use this software without fee is granted subject to 
%  the following restrictions:
% 
%  1. This software may not be used or distributed for direct commercial
%     gain.
% 
%  2. The author is not responsible for the consequences of use of this
%     software, no matter how awful, even if they arise from flaws in it.
% 
%  3. The origin of this software must not be misrepresented, either by
%     explicit claim or by omission.
% 
%  4. This code may be altered to suit your need, but such alterations
%     must be plainly marked and the code must not be misrepresented
%     as the original software.
% 
%  5. This notice may not be removed or altered.
% 
%**********************************************************************
symbolic$

% this is for ANSI terminals. Change to suit. If desperate, make it "".
% upcursor!* is also set if the environment variable UPCURSOR is present.
upcursor!* := '(! "[A")$   % note the literal control char!

% This is for one version of a monitor on DOS.
%upcursor!* := '(! "[2A" !)$   % literal control chars!!


invertextension!* := '!_!i!n!v$
offspringextcase!* := 97$     % change to 65 for upper case
terpricount!* := 0$   % pager line counter reset at each prompt.
conprod!-warning!-limit!* := 511;  % print a message if contraction is bigger

% default switch setttings
!*allerr:='nil$    % if t causes merror to fatal err for all calls
!*diftmp:= 'nil$
!*paging := 't$
!*rewrite:= 't$
!*xeval:= 'nil$
!*extendedsum:= 'nil$
!*evalindex := 'nil$
!*hide := 'nil$
!*longshift := 'nil$      % controls shifted obj. names: t means _udud form
!*peek := 'nil$
!*promptenv := 'nil$
!*reversedir := 't$
!*mkobjsafe := 't$
!*fancydf := 'nil$
!*symzexp := 't$
!*newriccistyle = 'nil;   % determines how Ricci tensor is constructed

!*dfprint := 't$  % turn on the reduce pretty print for df's
%!*nero := 't$

screenlines!* := 22$  % also set from LINES env var in set!-defaults!-from!-environment()

defindextype!* := '(   % default index type, ranges and print formats.
(array 0 (0 3) ("%" . d) nil)
(tensor 1 (0 3) ("%" . d) 
   (lambda nil (mycar (christoffel2!* '(nil)))))
(frame 2 (0 3) ("(%)" . u) nil)
(spinor 3 (1 2) ("%" . u) 
   (lambda nil (mycar (spchristoffel!* '(nil)))))
(spinor 4 (1 2) ("%'" . u) 
   (lambda nil (get (mycar (spchristoffel!* '(nil))) 'conjugate)))        
(dyad 5 (1 2) ("%" . d) nil)
(dyad 6 (1 2) ("%'" . d) nil)
)$

 % how to map conjugate indices
conjugateindextypes!* := '((3 . 4) (4 . 3) (5 . 6) (6 . 5) 
			(-3 . -4) (-4 . -3) (-5 . -6) (-6 . -5))$

initlendefindextype!* := length (defindextype!*)$

coords!* := '(!t  !r  !t!h  !p!h)$ % default coordinates

delta!* ('(!d0 0))$         % generate system delta functions
delta!* ('(!d1 1))$
delta!* ('(!d2 2))$
delta!* ('(!d3 3))$
delta!* ('(!d4 4))$
delta!* ('(!d5 5))$
delta!* ('(!d6 6))$

indexed!-names:= 'nil$

currentmetric:= '()$  % no array metric!
currentconnection := '()$

apply('add!-to!-environment, list switchlist!*)$

add!-to!-environment ('(
% redten vars
title
loadlist
defindextype!*
coords!*
currentmetric
currentconnection
metricseq
screenlines!*
))$

flag ('(seval currentmetric defindextype metricseq screenlines!*
     	currentconnection), 'keep)$   % otherwise they lose their values


%shouldn't all this be in a deflist or something?
frmetric := '!e!t!a$
nulltetrad := '!n!t$
gamma := '!g!a!m$
frriemann := '!f!r!r!i$
frricci := '!f!r!r!i!c$
frriccisc := '!f!r!r!i!c!s!c$
freinstein := '!f!r!e!i$
frweyl := '!f!r!c$
metric := '!g$
christoffel1 := '!c1$
christoffel2 := '!c2$
riemann := '!R$
ricci := '!r!i!c$
riccisc := '!r!i!c!s!c$
einstein := '!G$
weyl := '!C$
spmetric := '(!e3 !e4)$
spinmat := '!s!i!g$
spchristoffel := '!s!p!c$	
geodesic := '!s$		% default name for affine parameter
killing := '!k$			% default name for killing vector
mkcoords := '!x$

%Newman-Penrose stuff
nulltet := '!z$			% nulltetrad connection
npt1 	:= '!l$			% nulltetrad vectors
npt2 	:= '!n$
npt3 	:= '!m$
npt4 	:= '!m!c$		% conjugate of m
npspin 	:= '!n!p!s!p!c$  	% name for spin coeffs
npweyl!_sp 	:= '!n!p!C$  	% name for weyl spinor
npweyl 	:= '!P$          	% name for NP shorthand name of weyl spinor
npricci!_sp 	:= '!n!p!r!i!c$	% name for ricci spinor
npricci := '!F!I$		% name for NP shorthand name of ricci spinor
petrov := '!p!e!t$		% name for array used by petrov().

%mkcoords (mkcoords, 'nil)$  % make a coordinate vector.

% set up generic names
makegeneric (metric, '(1 . metric), '(-1 -1), '((1 1 2)), 'nil)$
put (metric, 'shift, list ('t, metric, 'd1))$  % add delta link
makegeneric (christoffel1, '(1 . christoffel1), '(-1 -1 -1), '((1 1 2)), 'christoffel1!*)$
makegeneric (christoffel2, '(1 . christoffel2), '(1 -1 -1), '((1 2 3)), 'christoffel2!*)$
makegeneric (riemann, '(1 . riemann), '(-1 -1 -1 -1), 
	'((-1 1 2)(-1 3 4)(2 1 3)), 'riemann!*)$
makegeneric ('!r!i, '(1 . riemann), '(-1 -1 -1 -1), 
	'((-1 1 2)(-1 3 4)(2 1 3)), 'riemann!*)$
put ('!r!i, 'printname, riemann)$	 
makegeneric (ricci, '(1 . ricci), '(-1 -1), '((1 1 2)), 'ricci!*)$
put (ricci, 'printname, riemann)$	% Use R for both  
makegeneric (riccisc, '(1 . riccisc), 'nil, 'nil, 'riccisc!*)$
makegeneric (einstein, '(1 . einstein), '(-1 -1), '((1 1 2)), 'einstein!*)$
makegeneric ('!e!i, '(1 . einstein), '(-1 -1), '((1 1 2)), 'einstein!*)$
makegeneric (weyl, '(1 . weyl), '(-1 -1 -1 -1), 
	'((-1 1 2)(-1 3 4)(2 1 3)), 'weyl!*)$
%makegeneric ('!c, '(1 . weyl), '(-1 -1 -1 -1), 
%	'((-1 1 2)(-1 3 4)(2 1 3)), 'weyl!*)$
makegeneric (nulltetrad, '(2 . nulltetrad), '(-2 1), 'nil, 'nil)$
makegeneric (gamma, '(2 . gamma), '(-2 -1 -1), '((-1 2 3)), 'gamma!*)$
makegeneric (frmetric, '(2 . frmetric), '(-2 -2), '((1 1 2)), 'nil)$
makegeneric (frriemann, '(2 . frriemann), '(-2 -2 -2 -2), 
	'((-1 1 2)(-1 3 4)(2 1 3)), 'frriemann!*)$
makegeneric (frricci, '(2 . frricci), '(-2 -2), '((1 1 2)), 'frricci!*)$
makegeneric (frriccisc, '(2 . frriccisc), 'nil, 'nil, 'frriccisc!*)$
makegeneric (freinstein, '(2 . freinstein), '(-2 -2), '((1 1 2)), 'freinstein!*)$
makegeneric (frweyl, '(2 . frweyl), '(-2 -2 -2 -2), 
	'((-1 1 2)(-1 3 4)(2 1 3)), 'frweyl!*)$
makegeneric (spinmat, '(1 . spinmat), '(-1 3 4), '((c 1 2 3)), 'spinmat!*)$
makegeneric (spchristoffel, '(3 . spchristoffel), '(3 -3 -1), 'nil, 'spchristoffel!*)$

makegeneric (nulltet, '(2 . nulltet), '(-2 -1),'(), 'nulltet);
makegeneric (npt1, '(2 . npt1), '(-1), '(), 'nulltet);
makegeneric (npt2, '(2 . npt2), '(-1), '(), 'nulltet);
makegeneric (npt3, '(2 . npt3), '(-1), '(), 'nulltet);
makegeneric (npt4, '(2 . npt4), '(-1), '(), 'nulltet);
put (npt4, 'conjugate, list (npt3, 't));
put (npt3, 'conjugate, list (npt4, 'nil));
put (npt4, 'printname, npt3);
makegeneric (npspin, '(2 . npspin), '(-3 -3 -3 -4), 
	'((1 1 2)), 'npspin)$
makegeneric (npweyl!_sp, '(2 . npweyl!_sp), '(-3 -3 -3 -3), '((1 1 2 3 4)), 'npweyl)$
%makegeneric (npweyl, '(2 . npweyl), '(0), 'nil, 'npweyl)$
%restrict!* (npweyl, '(0), '(4))$
makegeneric (npricci!_sp, '(2 . npricci!_sp), '(-3 -3 -4 -4),
	'((1 1 2)(1 3 4)(c 2 1 3)), 'npricci);
makegeneric (npricci, '(2 . npricci), '(0 0), '((c 1 1 2)), 'npricci)$
restrict!* (npricci, '(0 0), '(2 2))$
makegeneric (petrov, '(2 . petrov),  '(0), 'nil, 'nil);
restrict!* (petrov, '(0), '(5));  % I, J, I^3-27J^2, G, H, D


indexed!-names := 'nil$    % clear generics (not really needed, since makegeneric does this)

%bdate!* := date()$
version := "Reduce-tensor, Version v4.42, Nov 20, 2009"$
	
$end$	
